$date
	Sun Dec 17 01:49:17 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module phase4_tb $end
$var wire 1 ! Branch $end
$var wire 1 " Cond_Mux $end
$var wire 32 # EX_TA [31:0] $end
$var wire 1 $ LE $end
$var wire 32 % TA [31:0] $end
$var wire 1 & TaMux $end
$var wire 1 ' WB_Register_File_Enable $end
$var wire 1 ( cond_branch_OUT $end
$var wire 20 ) instr_signals [19:0] $end
$var wire 32 * instruction_condition_handler [31:0] $end
$var wire 5 + rt_EX [4:0] $end
$var wire 5 , rt [4:0] $end
$var wire 5 - rs_EX [4:0] $end
$var wire 5 . rs [4:0] $end
$var wire 5 / rd_EX [4:0] $end
$var wire 5 0 rd [4:0] $end
$var wire 32 1 pb [31:0] $end
$var wire 32 2 pa [31:0] $end
$var wire 32 3 operand2_handler_out [31:0] $end
$var wire 1 4 nPC_LE $end
$var wire 32 5 nPC4 [31:0] $end
$var wire 32 6 nPC [31:0] $end
$var wire 32 7 lo_signal_EX [31:0] $end
$var wire 32 8 lo_out_signal [31:0] $end
$var wire 32 9 instruction_id [31:0] $end
$var wire 32 : instruction [31:0] $end
$var wire 32 ; imm16_SE [31:0] $end
$var wire 16 < imm16Handler_ID [15:0] $end
$var wire 16 = imm16Handler_EX [15:0] $end
$var wire 16 > imm16 [15:0] $end
$var wire 1 ? if_id_reset_condition_handler $end
$var wire 32 @ hi_signal_EX [31:0] $end
$var wire 32 A hi_out_signal [31:0] $end
$var wire 2 B forwardPC [1:0] $end
$var wire 2 C forwardMX2 [1:0] $end
$var wire 2 D forwardMX1 [1:0] $end
$var wire 11 E control_signals_out_ID_EX [10:0] $end
$var wire 5 F control_signals_out_EX_MEM [4:0] $end
$var wire 25 G control_signals_cu [24:0] $end
$var wire 25 H control_signals_cmux [24:0] $end
$var wire 32 I addr26_SE [31:0] $end
$var wire 26 J addr26 [25:0] $end
$var wire 1 K Z_condition_handler $end
$var wire 5 L WriteDestination_WB [4:0] $end
$var wire 5 M WriteDestination_MEM [4:0] $end
$var wire 5 N WriteDestination_ID [4:0] $end
$var wire 5 O WriteDestination_EX [4:0] $end
$var wire 32 P WB_OUT [31:0] $end
$var wire 1 Q Reset $end
$var wire 1 R RegFileEnable $end
$var wire 5 S RD_WB [4:0] $end
$var wire 5 T RD_MEM [4:0] $end
$var wire 32 U PC_dummy [31:0] $end
$var wire 32 V PC_MUX_OUT [31:0] $end
$var wire 32 W PC_MEM [31:0] $end
$var wire 1 X PC_LE $end
$var wire 32 Y PC_ID [31:0] $end
$var wire 32 Z PC_EX [31:0] $end
$var wire 1 [ N_condition_handler $end
$var wire 1 \ MemtoReg $end
$var wire 32 ] MEM_OUT_MEM [31:0] $end
$var wire 32 ^ MEM_OUT [31:0] $end
$var wire 32 _ MEM_MX2 [31:0] $end
$var wire 32 ` MEM_ALU_OUT_Address [31:0] $end
$var wire 1 a LoEnable $end
$var wire 32 b JalAdder_WB [31:0] $end
$var wire 32 c JalAdder_MEM [31:0] $end
$var wire 32 d JalAdder_ID [31:0] $end
$var wire 32 e JalAdder_EX [31:0] $end
$var wire 1 f IF_ID_Pipeline_LE $end
$var wire 32 g ID_TA [31:0] $end
$var wire 32 h ID_MX2 [31:0] $end
$var wire 32 i ID_MX1 [31:0] $end
$var wire 1 j HiEnable $end
$var wire 32 k EX_MX2 [31:0] $end
$var wire 32 l EX_MX1 [31:0] $end
$var wire 32 m DataMemory_OUT [31:0] $end
$var wire 5 n DataMemInstructions [4:0] $end
$var wire 1 o CH_Out_condition_handler $end
$var wire 32 p Base_Addr_SE [31:0] $end
$var wire 32 q Base_Addr_A [31:0] $end
$var wire 32 r ALU_OUT [31:0] $end
$var reg 8 s Addr [7:0] $end
$var reg 1 t clk $end
$var reg 1 u clr $end
$var reg 32 v code [31:0] $end
$var reg 8 w data [7:0] $end
$var reg 32 x fi [31:0] $end
$var reg 32 y pw_signal [31:0] $end
$scope module Base_Addr_mux $end
$var wire 1 z S $end
$var wire 32 { I1 [31:0] $end
$var wire 32 | I0 [31:0] $end
$var reg 32 } Y [31:0] $end
$upscope $end
$scope module MEM_MUX $end
$var wire 1 ~ S $end
$var wire 32 !" I1 [31:0] $end
$var wire 32 "" I0 [31:0] $end
$var reg 32 #" Y [31:0] $end
$upscope $end
$scope module MX1 $end
$var wire 32 $" I2 [31:0] $end
$var wire 2 %" S [1:0] $end
$var wire 32 &" I3 [31:0] $end
$var wire 32 '" I1 [31:0] $end
$var wire 32 (" I0 [31:0] $end
$var reg 32 )" Y [31:0] $end
$upscope $end
$scope module MX2 $end
$var wire 32 *" I2 [31:0] $end
$var wire 2 +" S [1:0] $end
$var wire 32 ," I3 [31:0] $end
$var wire 32 -" I1 [31:0] $end
$var wire 32 ." I0 [31:0] $end
$var reg 32 /" Y [31:0] $end
$upscope $end
$scope module MemtoReg_MUX $end
$var wire 32 0" I0 [31:0] $end
$var wire 1 \ S $end
$var wire 32 1" I1 [31:0] $end
$var reg 32 2" Y [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 3" TA [31:0] $end
$var wire 32 4" jump_target [31:0] $end
$var wire 2 5" select [1:0] $end
$var wire 32 6" nPC [31:0] $end
$var reg 32 7" Q [31:0] $end
$upscope $end
$scope module RAM $end
$var wire 8 8" Address [7:0] $end
$var wire 1 9" Enable $end
$var wire 1 :" ReadWrite $end
$var wire 1 ;" SignExtend $end
$var wire 2 <" Size [1:0] $end
$var wire 32 =" DataIn [31:0] $end
$var reg 32 >" DataOut [31:0] $end
$upscope $end
$scope module ROM $end
$var wire 9 ?" Address [8:0] $end
$var reg 32 @" DataOut [31:0] $end
$upscope $end
$scope module RS_Addr_MUX $end
$var wire 32 A" I0 [31:0] $end
$var wire 1 B" S $end
$var wire 32 C" I1 [31:0] $end
$var reg 32 D" Y [31:0] $end
$upscope $end
$scope module SignExtender_addr26 $end
$var wire 26 E" extend [25:0] $end
$var reg 32 F" extended [31:0] $end
$upscope $end
$scope module SignExtender_imm16 $end
$var wire 16 G" extend [15:0] $end
$var reg 32 H" extended [31:0] $end
$upscope $end
$scope module TA_MUX $end
$var wire 32 I" I0 [31:0] $end
$var wire 32 J" I1 [31:0] $end
$var wire 1 & S $end
$var reg 32 K" Y [31:0] $end
$upscope $end
$scope module WriteDestination_MUX $end
$var wire 5 L" I2 [4:0] $end
$var wire 2 M" S [1:0] $end
$var wire 5 N" I1 [4:0] $end
$var wire 5 O" I0 [4:0] $end
$var reg 5 P" Y [4:0] $end
$upscope $end
$scope module adder32Bit $end
$var wire 32 Q" b [31:0] $end
$var wire 32 R" a [31:0] $end
$var reg 32 S" out [31:0] $end
$upscope $end
$scope module adder32Bit_jal $end
$var wire 1 T" S $end
$var wire 4 U" b [3:0] $end
$var wire 32 V" a [31:0] $end
$var reg 32 W" out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 X" opcode [3:0] $end
$var wire 32 Y" B [31:0] $end
$var wire 32 Z" A [31:0] $end
$var reg 1 [ N $end
$var reg 32 [" Out [31:0] $end
$var reg 1 K Z $end
$upscope $end
$scope module condition_handler_instance $end
$var wire 1 [ N $end
$var wire 1 K Z $end
$var wire 32 \" instruction [31:0] $end
$var parameter 6 ]" FUNC_ADD $end
$var parameter 6 ^" FUNC_ADDU $end
$var parameter 6 _" FUNC_AND $end
$var parameter 6 `" FUNC_JALR $end
$var parameter 6 a" FUNC_JR $end
$var parameter 6 b" FUNC_MFHI $end
$var parameter 6 c" FUNC_MFLO $end
$var parameter 6 d" FUNC_MOVN $end
$var parameter 6 e" FUNC_MOVZ $end
$var parameter 6 f" FUNC_MTHI $end
$var parameter 6 g" FUNC_MTLO $end
$var parameter 6 h" FUNC_NOR $end
$var parameter 6 i" FUNC_OR $end
$var parameter 6 j" FUNC_SLL $end
$var parameter 6 k" FUNC_SLLV $end
$var parameter 6 l" FUNC_SLT $end
$var parameter 6 m" FUNC_SLTU $end
$var parameter 6 n" FUNC_SRA $end
$var parameter 6 o" FUNC_SRAV $end
$var parameter 6 p" FUNC_SRL $end
$var parameter 6 q" FUNC_SRLV $end
$var parameter 6 r" FUNC_SUB $end
$var parameter 6 s" FUNC_SUBU $end
$var parameter 6 t" FUNC_XOR $end
$var parameter 6 u" OPCODE_ADDI $end
$var parameter 6 v" OPCODE_ADDIU $end
$var parameter 6 w" OPCODE_ANDI $end
$var parameter 6 x" OPCODE_BEQ $end
$var parameter 6 y" OPCODE_BGTZ $end
$var parameter 6 z" OPCODE_BLEZ $end
$var parameter 6 {" OPCODE_BNE $end
$var parameter 6 |" OPCODE_J $end
$var parameter 6 }" OPCODE_JAL $end
$var parameter 6 ~" OPCODE_LB $end
$var parameter 6 !# OPCODE_LBU $end
$var parameter 6 "# OPCODE_LH $end
$var parameter 6 ## OPCODE_LHU $end
$var parameter 6 $# OPCODE_LUI $end
$var parameter 6 %# OPCODE_LW $end
$var parameter 6 &# OPCODE_ORI $end
$var parameter 6 '# OPCODE_REGIMM $end
$var parameter 6 (# OPCODE_RTYPE $end
$var parameter 6 )# OPCODE_SB $end
$var parameter 6 *# OPCODE_SH $end
$var parameter 6 +# OPCODE_SLTI $end
$var parameter 6 ,# OPCODE_SLTIU $end
$var parameter 6 -# OPCODE_SPECIAL $end
$var parameter 6 .# OPCODE_SW $end
$var parameter 6 /# OPCODE_XORI $end
$var parameter 5 0# RT_BAL $end
$var parameter 5 1# RT_BGEZ $end
$var parameter 5 2# RT_BGEZAL $end
$var parameter 5 3# RT_BLTZ $end
$var parameter 5 4# RT_BLTZAL $end
$var reg 1 o CH_Out $end
$var reg 1 ? if_id_reset $end
$upscope $end
$scope module control_unit $end
$var wire 32 5# instruction [31:0] $end
$var parameter 6 6# FUNC_ADD $end
$var parameter 6 7# FUNC_ADDU $end
$var parameter 6 8# FUNC_AND $end
$var parameter 6 9# FUNC_JALR $end
$var parameter 6 :# FUNC_JR $end
$var parameter 6 ;# FUNC_MFHI $end
$var parameter 6 <# FUNC_MFLO $end
$var parameter 6 =# FUNC_MOVN $end
$var parameter 6 ># FUNC_MOVZ $end
$var parameter 6 ?# FUNC_MTHI $end
$var parameter 6 @# FUNC_MTLO $end
$var parameter 6 A# FUNC_NOR $end
$var parameter 6 B# FUNC_OR $end
$var parameter 6 C# FUNC_SLL $end
$var parameter 6 D# FUNC_SLLV $end
$var parameter 6 E# FUNC_SLT $end
$var parameter 6 F# FUNC_SLTU $end
$var parameter 6 G# FUNC_SRA $end
$var parameter 6 H# FUNC_SRAV $end
$var parameter 6 I# FUNC_SRL $end
$var parameter 6 J# FUNC_SRLV $end
$var parameter 6 K# FUNC_SUB $end
$var parameter 6 L# FUNC_SUBU $end
$var parameter 6 M# FUNC_XOR $end
$var parameter 6 N# OPCODE_ADDI $end
$var parameter 6 O# OPCODE_ADDIU $end
$var parameter 6 P# OPCODE_ANDI $end
$var parameter 6 Q# OPCODE_BEQ $end
$var parameter 6 R# OPCODE_BGTZ $end
$var parameter 6 S# OPCODE_BLEZ $end
$var parameter 6 T# OPCODE_BNE $end
$var parameter 6 U# OPCODE_J $end
$var parameter 6 V# OPCODE_JAL $end
$var parameter 6 W# OPCODE_LB $end
$var parameter 6 X# OPCODE_LBU $end
$var parameter 6 Y# OPCODE_LH $end
$var parameter 6 Z# OPCODE_LHU $end
$var parameter 6 [# OPCODE_LUI $end
$var parameter 6 \# OPCODE_LW $end
$var parameter 6 ]# OPCODE_ORI $end
$var parameter 6 ^# OPCODE_REGIMM $end
$var parameter 6 _# OPCODE_RTYPE $end
$var parameter 6 `# OPCODE_SB $end
$var parameter 6 a# OPCODE_SH $end
$var parameter 6 b# OPCODE_SLTI $end
$var parameter 6 c# OPCODE_SLTIU $end
$var parameter 6 d# OPCODE_SPECIAL $end
$var parameter 6 e# OPCODE_SW $end
$var parameter 6 f# OPCODE_XORI $end
$var parameter 5 g# RT_BAL $end
$var parameter 5 h# RT_BGEZ $end
$var parameter 5 i# RT_BGEZAL $end
$var parameter 5 j# RT_BLTZ $end
$var parameter 5 k# RT_BLTZAL $end
$var reg 4 l# ALUOp [3:0] $end
$var reg 1 m# Base_Addr_MUX $end
$var reg 1 n# Branch $end
$var reg 1 o# CMUX $end
$var reg 1 p# Cond_Mux $end
$var reg 1 q# Data_Mem_Enable $end
$var reg 1 r# Data_Mem_RW $end
$var reg 1 s# Data_Mem_SE $end
$var reg 2 t# Data_Mem_Size [1:0] $end
$var reg 1 u# HiEnable $end
$var reg 1 v# JalAdder $end
$var reg 1 w# Jump $end
$var reg 1 x# Jump_Addr_MUX_Enable $end
$var reg 1 y# LoEnable $end
$var reg 1 z# Load $end
$var reg 1 {# MEM_MUX $end
$var reg 1 |# MemtoReg $end
$var reg 1 }# RegFileEnable $end
$var reg 1 ~# RsAddrMux $end
$var reg 3 !$ S0_S2 [2:0] $end
$var reg 1 "$ TaMux $end
$var reg 2 #$ WriteDestination [1:0] $end
$var reg 25 $$ instr_signals [24:0] $end
$upscope $end
$scope module control_unit_mux_inst $end
$var wire 1 %$ CMUX $end
$var wire 25 &$ control_signals_in [24:0] $end
$var reg 25 '$ control_signals_out [24:0] $end
$upscope $end
$scope module ex_mem_register $end
$var wire 32 ($ EX_ALU_OUT [31:0] $end
$var wire 1 t clk $end
$var wire 1 u reset $end
$var wire 5 )$ WriteDestination_EX [4:0] $end
$var wire 32 *$ PC [31:0] $end
$var wire 32 +$ JalAdder_EX [31:0] $end
$var wire 11 ,$ EX_control_signals_in [10:0] $end
$var wire 5 -$ EX_RD [4:0] $end
$var wire 32 .$ EX_MX2 [31:0] $end
$var reg 5 /$ Data_Mem_instructions [4:0] $end
$var reg 5 0$ EX_MEM_control_signals [4:0] $end
$var reg 32 1$ JalAdder_MEM [31:0] $end
$var reg 32 2$ MEM_ALU_OUT [31:0] $end
$var reg 1 3$ MEM_MUX $end
$var reg 32 4$ MEM_MX2 [31:0] $end
$var reg 5 5$ MEM_RD [4:0] $end
$var reg 32 6$ PC_MEM [31:0] $end
$var reg 5 7$ WriteDestination_MEM [4:0] $end
$upscope $end
$scope module hazard_forwarding_unit_instance $end
$var wire 1 8$ EX_Register_File_Enable $end
$var wire 1 9$ EX_load_instr $end
$var wire 5 :$ MEM_RD [4:0] $end
$var wire 1 ;$ MEM_Register_File_Enable $end
$var wire 5 <$ operandB [4:0] $end
$var wire 5 =$ operandA [4:0] $end
$var wire 1 R WB_Register_File_Enable $end
$var wire 5 >$ WB_RD [4:0] $end
$var wire 5 ?$ EX_RD [4:0] $end
$var reg 1 f IF_ID_LE $end
$var reg 1 X PC_LE $end
$var reg 2 @$ forwardMX1 [1:0] $end
$var reg 2 A$ forwardMX2 [1:0] $end
$var reg 1 4 nPC_LE $end
$upscope $end
$scope module hi_reg_inst $end
$var wire 32 B$ PW [31:0] $end
$var wire 1 t clk $end
$var wire 1 j HiEnable $end
$var reg 32 C$ HiSignal [31:0] $end
$upscope $end
$scope module id_ex_register $end
$var wire 32 D$ ID_MX1 [31:0] $end
$var wire 32 E$ ID_MX2 [31:0] $end
$var wire 32 F$ ID_TA [31:0] $end
$var wire 32 G$ JalAdder_ID [31:0] $end
$var wire 5 H$ WriteDestination_ID [4:0] $end
$var wire 1 t clk $end
$var wire 18 I$ control_signals_in [17:0] $end
$var wire 32 J$ hi_signal_ID [31:0] $end
$var wire 32 K$ instruction_in [31:0] $end
$var wire 1 u reset $end
$var wire 5 L$ rt_ID [4:0] $end
$var wire 5 M$ rs_ID [4:0] $end
$var wire 32 N$ lo_signal_ID [31:0] $end
$var wire 16 O$ imm16Handler_ID [15:0] $end
$var wire 32 P$ PC [31:0] $end
$var reg 4 Q$ EX_ALU_OP_instr [3:0] $end
$var reg 32 R$ EX_MX1 [31:0] $end
$var reg 32 S$ EX_MX2 [31:0] $end
$var reg 3 T$ EX_S02_instr [2:0] $end
$var reg 32 U$ EX_TA [31:0] $end
$var reg 11 V$ EX_control_unit_instr [10:0] $end
$var reg 32 W$ JalAdder_EX [31:0] $end
$var reg 32 X$ PC_EX [31:0] $end
$var reg 5 Y$ WriteDestination_EX [4:0] $end
$var reg 32 Z$ hi_signal_EX [31:0] $end
$var reg 16 [$ imm16Handler_EX [15:0] $end
$var reg 32 \$ lo_signal_EX [31:0] $end
$var reg 5 ]$ rd_EX [4:0] $end
$var reg 5 ^$ rs_EX [4:0] $end
$var reg 5 _$ rt_EX [4:0] $end
$upscope $end
$scope module if_id_register $end
$var wire 1 $ LE $end
$var wire 1 t clk $end
$var wire 32 `$ instruction_in [31:0] $end
$var wire 1 u reset $end
$var wire 32 a$ PC [31:0] $end
$var reg 26 b$ addr26 [25:0] $end
$var reg 16 c$ imm16 [15:0] $end
$var reg 16 d$ imm16Handler [15:0] $end
$var reg 32 e$ instruction_out [31:0] $end
$var reg 6 f$ opcode [5:0] $end
$var reg 32 g$ pc_out [31:0] $end
$var reg 5 h$ rd [4:0] $end
$var reg 5 i$ rs [4:0] $end
$var reg 5 j$ rt [4:0] $end
$upscope $end
$scope module lo_reg_inst $end
$var wire 32 k$ PW [31:0] $end
$var wire 1 t clk $end
$var wire 1 a LoEnable $end
$var reg 32 l$ LoSignal [31:0] $end
$upscope $end
$scope module mem_wb_register $end
$var wire 32 m$ JalAdder_MEM [31:0] $end
$var wire 32 n$ MEM_OUT_MEM [31:0] $end
$var wire 5 o$ MEM_RD [4:0] $end
$var wire 5 p$ MEM_control_signals_in [4:0] $end
$var wire 5 q$ WriteDestination_MEM [4:0] $end
$var wire 1 t clk $end
$var wire 1 u reset $end
$var reg 32 r$ JalAdder_WB [31:0] $end
$var reg 32 s$ MEM_OUT_WB [31:0] $end
$var reg 1 \ MemtoReg $end
$var reg 1 R RegFileEnable $end
$var reg 5 t$ WB_RD [4:0] $end
$var reg 5 u$ WriteDestination_WB [4:0] $end
$var reg 1 j hi_enable $end
$var reg 1 a lo_enable $end
$upscope $end
$scope module multiplierBy4 $end
$var wire 32 v$ in [31:0] $end
$var reg 32 w$ multipliedOut [31:0] $end
$upscope $end
$scope module nPC_PC_Handler $end
$var wire 1 ( branch $end
$var wire 1 x$ jump $end
$var reg 2 y$ pc_source_select [1:0] $end
$upscope $end
$scope module npc_reg $end
$var wire 1 t clk $end
$var wire 1 4 load_enable $end
$var wire 1 u reset $end
$var wire 32 z$ data_in [31:0] $end
$var reg 32 {$ data_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 |$ pc_in [31:0] $end
$var wire 32 }$ pc_out [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 t clk $end
$var wire 32 ~$ data_in [31:0] $end
$var wire 1 4 load_enable $end
$var wire 1 u reset $end
$var reg 32 !% data_out [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 t Clk $end
$var wire 1 R LE $end
$var wire 32 "% PW [31:0] $end
$var wire 5 #% RA [4:0] $end
$var wire 5 $% RB [4:0] $end
$var wire 5 %% RW [4:0] $end
$var wire 32 &% Q9 [31:0] $end
$var wire 32 '% Q8 [31:0] $end
$var wire 32 (% Q7 [31:0] $end
$var wire 32 )% Q6 [31:0] $end
$var wire 32 *% Q5 [31:0] $end
$var wire 32 +% Q4 [31:0] $end
$var wire 32 ,% Q31 [31:0] $end
$var wire 32 -% Q30 [31:0] $end
$var wire 32 .% Q3 [31:0] $end
$var wire 32 /% Q29 [31:0] $end
$var wire 32 0% Q28 [31:0] $end
$var wire 32 1% Q27 [31:0] $end
$var wire 32 2% Q26 [31:0] $end
$var wire 32 3% Q25 [31:0] $end
$var wire 32 4% Q24 [31:0] $end
$var wire 32 5% Q23 [31:0] $end
$var wire 32 6% Q22 [31:0] $end
$var wire 32 7% Q21 [31:0] $end
$var wire 32 8% Q20 [31:0] $end
$var wire 32 9% Q2 [31:0] $end
$var wire 32 :% Q19 [31:0] $end
$var wire 32 ;% Q18 [31:0] $end
$var wire 32 <% Q17 [31:0] $end
$var wire 32 =% Q16 [31:0] $end
$var wire 32 >% Q15 [31:0] $end
$var wire 32 ?% Q14 [31:0] $end
$var wire 32 @% Q13 [31:0] $end
$var wire 32 A% Q12 [31:0] $end
$var wire 32 B% Q11 [31:0] $end
$var wire 32 C% Q10 [31:0] $end
$var wire 32 D% Q1 [31:0] $end
$var wire 32 E% Q0 [31:0] $end
$var wire 32 F% PB [31:0] $end
$var wire 32 G% PA [31:0] $end
$var wire 32 H% E [31:0] $end
$scope module R0 $end
$var wire 1 t Clk $end
$var wire 32 I% D [31:0] $end
$var wire 1 J% Ld $end
$var reg 32 K% Q [31:0] $end
$upscope $end
$scope module R1 $end
$var wire 1 t Clk $end
$var wire 32 L% D [31:0] $end
$var wire 1 M% Ld $end
$var reg 32 N% Q [31:0] $end
$upscope $end
$scope module R10 $end
$var wire 1 t Clk $end
$var wire 32 O% D [31:0] $end
$var wire 1 P% Ld $end
$var reg 32 Q% Q [31:0] $end
$upscope $end
$scope module R11 $end
$var wire 1 t Clk $end
$var wire 32 R% D [31:0] $end
$var wire 1 S% Ld $end
$var reg 32 T% Q [31:0] $end
$upscope $end
$scope module R12 $end
$var wire 1 t Clk $end
$var wire 32 U% D [31:0] $end
$var wire 1 V% Ld $end
$var reg 32 W% Q [31:0] $end
$upscope $end
$scope module R13 $end
$var wire 1 t Clk $end
$var wire 32 X% D [31:0] $end
$var wire 1 Y% Ld $end
$var reg 32 Z% Q [31:0] $end
$upscope $end
$scope module R14 $end
$var wire 1 t Clk $end
$var wire 32 [% D [31:0] $end
$var wire 1 \% Ld $end
$var reg 32 ]% Q [31:0] $end
$upscope $end
$scope module R15 $end
$var wire 1 t Clk $end
$var wire 32 ^% D [31:0] $end
$var wire 1 _% Ld $end
$var reg 32 `% Q [31:0] $end
$upscope $end
$scope module R16 $end
$var wire 1 t Clk $end
$var wire 32 a% D [31:0] $end
$var wire 1 b% Ld $end
$var reg 32 c% Q [31:0] $end
$upscope $end
$scope module R17 $end
$var wire 1 t Clk $end
$var wire 32 d% D [31:0] $end
$var wire 1 e% Ld $end
$var reg 32 f% Q [31:0] $end
$upscope $end
$scope module R18 $end
$var wire 1 t Clk $end
$var wire 32 g% D [31:0] $end
$var wire 1 h% Ld $end
$var reg 32 i% Q [31:0] $end
$upscope $end
$scope module R19 $end
$var wire 1 t Clk $end
$var wire 32 j% D [31:0] $end
$var wire 1 k% Ld $end
$var reg 32 l% Q [31:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 t Clk $end
$var wire 32 m% D [31:0] $end
$var wire 1 n% Ld $end
$var reg 32 o% Q [31:0] $end
$upscope $end
$scope module R20 $end
$var wire 1 t Clk $end
$var wire 32 p% D [31:0] $end
$var wire 1 q% Ld $end
$var reg 32 r% Q [31:0] $end
$upscope $end
$scope module R21 $end
$var wire 1 t Clk $end
$var wire 32 s% D [31:0] $end
$var wire 1 t% Ld $end
$var reg 32 u% Q [31:0] $end
$upscope $end
$scope module R22 $end
$var wire 1 t Clk $end
$var wire 32 v% D [31:0] $end
$var wire 1 w% Ld $end
$var reg 32 x% Q [31:0] $end
$upscope $end
$scope module R23 $end
$var wire 1 t Clk $end
$var wire 32 y% D [31:0] $end
$var wire 1 z% Ld $end
$var reg 32 {% Q [31:0] $end
$upscope $end
$scope module R24 $end
$var wire 1 t Clk $end
$var wire 32 |% D [31:0] $end
$var wire 1 }% Ld $end
$var reg 32 ~% Q [31:0] $end
$upscope $end
$scope module R25 $end
$var wire 1 t Clk $end
$var wire 32 !& D [31:0] $end
$var wire 1 "& Ld $end
$var reg 32 #& Q [31:0] $end
$upscope $end
$scope module R26 $end
$var wire 1 t Clk $end
$var wire 32 $& D [31:0] $end
$var wire 1 %& Ld $end
$var reg 32 && Q [31:0] $end
$upscope $end
$scope module R27 $end
$var wire 1 t Clk $end
$var wire 32 '& D [31:0] $end
$var wire 1 (& Ld $end
$var reg 32 )& Q [31:0] $end
$upscope $end
$scope module R28 $end
$var wire 1 t Clk $end
$var wire 32 *& D [31:0] $end
$var wire 1 +& Ld $end
$var reg 32 ,& Q [31:0] $end
$upscope $end
$scope module R29 $end
$var wire 1 t Clk $end
$var wire 32 -& D [31:0] $end
$var wire 1 .& Ld $end
$var reg 32 /& Q [31:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 t Clk $end
$var wire 32 0& D [31:0] $end
$var wire 1 1& Ld $end
$var reg 32 2& Q [31:0] $end
$upscope $end
$scope module R30 $end
$var wire 1 t Clk $end
$var wire 32 3& D [31:0] $end
$var wire 1 4& Ld $end
$var reg 32 5& Q [31:0] $end
$upscope $end
$scope module R31 $end
$var wire 1 t Clk $end
$var wire 32 6& D [31:0] $end
$var wire 1 7& Ld $end
$var reg 32 8& Q [31:0] $end
$upscope $end
$scope module R4 $end
$var wire 1 t Clk $end
$var wire 32 9& D [31:0] $end
$var wire 1 :& Ld $end
$var reg 32 ;& Q [31:0] $end
$upscope $end
$scope module R5 $end
$var wire 1 t Clk $end
$var wire 32 <& D [31:0] $end
$var wire 1 =& Ld $end
$var reg 32 >& Q [31:0] $end
$upscope $end
$scope module R6 $end
$var wire 1 t Clk $end
$var wire 32 ?& D [31:0] $end
$var wire 1 @& Ld $end
$var reg 32 A& Q [31:0] $end
$upscope $end
$scope module R7 $end
$var wire 1 t Clk $end
$var wire 32 B& D [31:0] $end
$var wire 1 C& Ld $end
$var reg 32 D& Q [31:0] $end
$upscope $end
$scope module R8 $end
$var wire 1 t Clk $end
$var wire 32 E& D [31:0] $end
$var wire 1 F& Ld $end
$var reg 32 G& Q [31:0] $end
$upscope $end
$scope module R9 $end
$var wire 1 t Clk $end
$var wire 32 H& D [31:0] $end
$var wire 1 I& Ld $end
$var reg 32 J& Q [31:0] $end
$upscope $end
$scope module bdecoder $end
$var wire 5 K& C [4:0] $end
$var wire 1 R RF $end
$var reg 32 L& E [31:0] $end
$upscope $end
$scope module mux_32x1A $end
$var wire 32 M& R0 [31:0] $end
$var wire 32 N& R1 [31:0] $end
$var wire 32 O& R10 [31:0] $end
$var wire 32 P& R11 [31:0] $end
$var wire 32 Q& R12 [31:0] $end
$var wire 32 R& R13 [31:0] $end
$var wire 32 S& R14 [31:0] $end
$var wire 32 T& R15 [31:0] $end
$var wire 32 U& R16 [31:0] $end
$var wire 32 V& R17 [31:0] $end
$var wire 32 W& R18 [31:0] $end
$var wire 32 X& R19 [31:0] $end
$var wire 32 Y& R2 [31:0] $end
$var wire 32 Z& R20 [31:0] $end
$var wire 32 [& R21 [31:0] $end
$var wire 32 \& R22 [31:0] $end
$var wire 32 ]& R23 [31:0] $end
$var wire 32 ^& R24 [31:0] $end
$var wire 32 _& R25 [31:0] $end
$var wire 32 `& R26 [31:0] $end
$var wire 32 a& R27 [31:0] $end
$var wire 32 b& R28 [31:0] $end
$var wire 32 c& R29 [31:0] $end
$var wire 32 d& R3 [31:0] $end
$var wire 32 e& R30 [31:0] $end
$var wire 32 f& R31 [31:0] $end
$var wire 32 g& R4 [31:0] $end
$var wire 32 h& R5 [31:0] $end
$var wire 32 i& R6 [31:0] $end
$var wire 32 j& R7 [31:0] $end
$var wire 32 k& R8 [31:0] $end
$var wire 32 l& R9 [31:0] $end
$var wire 5 m& S [4:0] $end
$var reg 32 n& Y [31:0] $end
$upscope $end
$scope module mux_32x1B $end
$var wire 32 o& R0 [31:0] $end
$var wire 32 p& R1 [31:0] $end
$var wire 32 q& R10 [31:0] $end
$var wire 32 r& R11 [31:0] $end
$var wire 32 s& R12 [31:0] $end
$var wire 32 t& R13 [31:0] $end
$var wire 32 u& R14 [31:0] $end
$var wire 32 v& R15 [31:0] $end
$var wire 32 w& R16 [31:0] $end
$var wire 32 x& R17 [31:0] $end
$var wire 32 y& R18 [31:0] $end
$var wire 32 z& R19 [31:0] $end
$var wire 32 {& R2 [31:0] $end
$var wire 32 |& R20 [31:0] $end
$var wire 32 }& R21 [31:0] $end
$var wire 32 ~& R22 [31:0] $end
$var wire 32 !' R23 [31:0] $end
$var wire 32 "' R24 [31:0] $end
$var wire 32 #' R25 [31:0] $end
$var wire 32 $' R26 [31:0] $end
$var wire 32 %' R27 [31:0] $end
$var wire 32 &' R28 [31:0] $end
$var wire 32 '' R29 [31:0] $end
$var wire 32 (' R3 [31:0] $end
$var wire 32 )' R30 [31:0] $end
$var wire 32 *' R31 [31:0] $end
$var wire 32 +' R4 [31:0] $end
$var wire 32 ,' R5 [31:0] $end
$var wire 32 -' R6 [31:0] $end
$var wire 32 .' R7 [31:0] $end
$var wire 32 /' R8 [31:0] $end
$var wire 32 0' R9 [31:0] $end
$var wire 5 1' S [4:0] $end
$var reg 32 2' Y [31:0] $end
$upscope $end
$upscope $end
$scope module reset_handler $end
$var wire 1 3' ID_branch_instr $end
$var wire 1 4' a $end
$var wire 1 ( condition_handler_instr $end
$var wire 1 u system_reset $end
$var reg 1 Q reset_out $end
$upscope $end
$scope module uut $end
$var wire 32 5' HI [31:0] $end
$var wire 32 6' LO [31:0] $end
$var wire 32 7' PB [31:0] $end
$var wire 32 8' PC [31:0] $end
$var wire 3 9' S0_S2 [2:0] $end
$var wire 16 :' imm16 [15:0] $end
$var reg 32 ;' N [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 k#
b0 j#
b10001 i#
b1 h#
b10001 g#
b1110 f#
b101011 e#
b11100 d#
b1011 c#
b1010 b#
b101001 a#
b101000 `#
b0 _#
b1 ^#
b1101 ]#
b100011 \#
b1111 [#
b100101 Z#
b100001 Y#
b100100 X#
b100000 W#
b11 V#
b10 U#
b101 T#
b110 S#
b111 R#
b100 Q#
b1100 P#
b1001 O#
b1000 N#
b100110 M#
b100011 L#
b100010 K#
b110 J#
b10 I#
b111 H#
b11 G#
b101011 F#
b101010 E#
b100 D#
b0 C#
b100101 B#
b100111 A#
b10011 @#
b10001 ?#
b1010 >#
b1011 =#
b10010 <#
b10000 ;#
b1000 :#
b1001 9#
b100100 8#
b100001 7#
b100000 6#
b10000 4#
b0 3#
b10001 2#
b1 1#
b10001 0#
b1110 /#
b101011 .#
b11100 -#
b1011 ,#
b1010 +#
b101001 *#
b101000 )#
b0 (#
b1 '#
b1101 &#
b100011 %#
b1111 $#
b100101 ##
b100001 "#
b100100 !#
b100000 ~"
b11 }"
b10 |"
b101 {"
b110 z"
b111 y"
b100 x"
b1100 w"
b1001 v"
b1000 u"
b100110 t"
b100011 s"
b100010 r"
b110 q"
b10 p"
b111 o"
b11 n"
b101011 m"
b101010 l"
b100 k"
b0 j"
b100101 i"
b100111 h"
b10011 g"
b10001 f"
b1010 e"
b1011 d"
b10010 c"
b10000 b"
b1000 a"
b1001 `"
b100100 _"
b100001 ^"
b100000 ]"
$end
#0
$dumpvars
bx ;'
bx :'
bx 9'
bx 8'
bx 7'
bx 6'
bx 5'
z4'
z3'
bx 2'
bx 1'
bx 0'
bx /'
bx .'
bx -'
bx ,'
bx +'
bx *'
bx )'
bx ('
bx ''
bx &'
bx %'
bx $'
bx #'
bx "'
bx !'
bx ~&
bx }&
bx |&
bx {&
bx z&
bx y&
bx x&
bx w&
bx v&
bx u&
bx t&
bx s&
bx r&
bx q&
bx p&
b0 o&
bx n&
bx m&
bx l&
bx k&
bx j&
bx i&
bx h&
bx g&
bx f&
bx e&
bx d&
bx c&
bx b&
bx a&
bx `&
bx _&
bx ^&
bx ]&
bx \&
bx [&
bx Z&
bx Y&
bx X&
bx W&
bx V&
bx U&
bx T&
bx S&
bx R&
bx Q&
bx P&
bx O&
bx N&
b0 M&
bx L&
bx K&
bx J&
xI&
bx H&
bx G&
xF&
bx E&
bx D&
xC&
bx B&
bx A&
x@&
bx ?&
bx >&
x=&
bx <&
bx ;&
x:&
bx 9&
bx 8&
x7&
bx 6&
bx 5&
x4&
bx 3&
bx 2&
x1&
bx 0&
bx /&
x.&
bx -&
bx ,&
x+&
bx *&
bx )&
x(&
bx '&
bx &&
x%&
bx $&
bx #&
x"&
bx !&
bx ~%
x}%
bx |%
bx {%
xz%
bx y%
bx x%
xw%
bx v%
bx u%
xt%
bx s%
bx r%
xq%
bx p%
bx o%
xn%
bx m%
bx l%
xk%
bx j%
bx i%
xh%
bx g%
bx f%
xe%
bx d%
bx c%
xb%
bx a%
bx `%
x_%
bx ^%
bx ]%
x\%
bx [%
bx Z%
xY%
bx X%
bx W%
xV%
bx U%
bx T%
xS%
bx R%
bx Q%
xP%
bx O%
bx N%
xM%
bx L%
bx K%
xJ%
bx I%
bx H%
bx G%
bx F%
bx E%
bx D%
bx C%
bx B%
bx A%
bx @%
bx ?%
bx >%
bx =%
bx <%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
b0 y$
zx$
bx w$
bx v$
bx u$
bx t$
bx s$
bx r$
bx q$
bx p$
bx o$
bx n$
bx m$
bx l$
bx k$
bx j$
bx i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
bx V$
bx U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
x;$
bx :$
x9$
x8$
bx 7$
bx 6$
bx 5$
bx 4$
x3$
bx 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
bx *$
bx )$
bx ($
bx '$
bx &$
x%$
bx $$
bx #$
x"$
bx !$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
bx t#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
bx l#
bx 5#
bz \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
b1000 U"
xT"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
b11111 L"
bx K"
bz J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
xB"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
x;"
x:"
x9"
bx 8"
bx 7"
bx 6"
b0 5"
bz 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
x~
bx }
bx |
bx {
xz
bx y
b0 x
bx w
bx v
1u
0t
b0 s
bx r
bx q
bx p
xo
bx n
bx m
bx l
bx k
xj
bx i
bx h
bx g
xf
bx e
bx d
bx c
bx b
xa
bx `
bx _
bx ^
bx ]
x\
x[
bx Z
bx Y
xX
bx W
bx V
bx U
bx T
bx S
xR
0Q
bx P
bx O
bx N
bx M
bx L
xK
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
b0 B
bx A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bz *
bz )
z(
z'
z&
bx %
z$
bz #
z"
z!
$end
#2000
b0 S"
b0 q
b0 R"
b0 w$
b0 h
b0 /"
b0 E$
b0 i
b0 )"
b0 D$
b0 3
b0 Y"
b0 ;'
b0 X"
b0 9'
b0 I$
b0 M"
b0 p
b0 }
b0 v$
b1000 d
b1000 W"
b1000 G$
b10000000000000000000000 H
b10000000000000000000000 '$
b0 I
b0 {
b0 F"
b0 ;
b0 |
b0 H"
1f
1X
14
b0 C
b0 +"
b0 A$
b0 D
b0 %"
b0 @$
1%$
0B"
0T"
0z
b0 P
b0 &"
b0 ,"
b0 2"
b0 "%
b0 I%
b0 L%
b0 O%
b0 R%
b0 U%
b0 X%
b0 [%
b0 ^%
b0 a%
b0 d%
b0 g%
b0 j%
b0 m%
b0 p%
b0 s%
b0 v%
b0 y%
b0 |%
b0 !&
b0 $&
b0 '&
b0 *&
b0 -&
b0 0&
b0 3&
b0 6&
b0 9&
b0 <&
b0 ?&
b0 B&
b0 E&
b0 H&
07&
04&
0.&
0+&
0(&
0%&
0"&
0}%
0z%
0w%
0t%
0q%
0k%
0h%
0e%
0b%
0_%
0\%
0Y%
0V%
0S%
0P%
0I&
0F&
0C&
0@&
0=&
0:&
01&
0n%
0M%
0J%
b100 V
b100 7"
b100 ~$
b0 ?"
b0 1
b0 ."
b0 F%
b0 2'
b0 2
b0 ("
b0 C"
b0 G%
b0 n&
0{#
b10000000000000000000000 G
b10000000000000000000000 $$
b10000000000000000000000 &$
0z#
0|#
0y#
0x#
0}#
0u#
0s#
b0 t#
0q#
0r#
b0 l#
0~#
0m#
b0 !$
b0 #$
0"$
1o#
0v#
0n#
0w#
0p#
09$
08$
0[
1K
b0 r
b0 '"
b0 -"
b0 ["
b0 ($
b0 <"
0;"
0:"
09"
0;$
b0 8"
b0 ^
b0 #"
b0 $"
b0 *"
b0 0"
b0 n$
b0 H%
b0 L&
b1000 5
b1000 z$
b1000 }$
b100 6
b100 6"
b100 {$
b100 |$
b0 U
b0 a$
b0 !%
b0 f$
b0 0
b0 h$
b0 ,
b0 N"
b0 <$
b0 L$
b0 j$
b0 $%
b0 1'
b0 .
b0 O"
b0 =$
b0 M$
b0 i$
b0 #%
b0 m&
b0 <
b0 O$
b0 d$
b0 J
b0 E"
b0 b$
b0 >
b0 G"
b0 c$
b0 Y
b0 Q"
b0 V"
b0 P$
b0 g$
b0 9
b0 5#
b0 e$
b0 U$
b0 E
b0 ,$
b0 V$
b0 T$
b0 Q$
b0 Z
b0 *$
b0 X$
b0 8'
b0 /
b0 -$
b0 ?$
b0 ]$
b0 +
b0 _$
b0 -
b0 ^$
b0 k
b0 .$
b0 S$
b0 7'
b0 l
b0 Z"
b0 R$
b0 =
b0 [$
b0 :'
b0 7
b0 \$
b0 @
b0 Z$
b0 O
b0 )$
b0 Y$
b0 e
b0 +$
b0 W$
b0 T
b0 5$
b0 :$
b0 o$
03$
b0 n
b0 /$
b0 F
b0 0$
b0 p$
b0 W
b0 6$
b0 M
b0 7$
b0 q$
b0 c
b0 1$
b0 m$
b0 _
b0 ="
b0 4$
b0 `
b0 ""
b0 2$
b0 S
b0 >$
b0 t$
0\
0R
0a
0j
b0 L
b0 u$
b0 %%
b0 K&
b0 b
b0 1"
b0 r$
b0 ]
b0 s$
1t
#3000
0u
#4000
0t
#6000
bx S"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 q
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 R"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 w$
b0xxxxxxxxxxxxxxxxxxxxxxxxxx p
b0xxxxxxxxxxxxxxxxxxxxxxxxxx }
b0xxxxxxxxxxxxxxxxxxxxxxxxxx v$
bx I
bx {
bx F"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx ;
b0xxxxxxxxxxxxxxxxxxxxxxxxxx |
b0xxxxxxxxxxxxxxxxxxxxxxxxxx H"
b10000000000000000000000 G
b10000000000000000000000 $$
b10000000000000000000000 &$
b100 ?"
b1000 V
b1000 7"
b1000 ~$
bx U$
bx /
bx -$
bx ?$
bx ]$
bx +
bx _$
bx -
bx ^$
bx 7
bx \$
bx @
bx Z$
bx O
bx )$
bx Y$
b1000 e
b1000 +$
b1000 W$
bx f$
bx 0
bx h$
bx ,
bx N"
bx <$
bx L$
bx j$
bx $%
bx 1'
bx .
bx O"
bx =$
bx M$
bx i$
bx #%
bx m&
bx <
bx O$
bx d$
bx J
bx E"
bx b$
bx >
bx G"
bx c$
bx 9
bx 5#
bx e$
b100 U
b100 a$
b100 !%
b1100 5
b1100 z$
b1100 }$
b1000 6
b1000 6"
b1000 {$
b1000 |$
1t
#8000
0t
#10000
b1100 V
b1100 7"
b1100 ~$
b1000 ?"
b10000 5
b10000 z$
b10000 }$
b1100 6
b1100 6"
b1100 {$
b1100 |$
b1000 U
b1000 a$
b1000 !%
b100 Y
b100 Q"
b100 V"
b100 P$
b100 g$
bx =
bx [$
bx :'
bx T
bx 5$
bx :$
bx o$
bx M
bx 7$
bx q$
b1000 c
b1000 1$
b1000 m$
1t
#12000
0t
#14000
b1100 ?"
b10000 V
b10000 7"
b10000 ~$
bx S
bx >$
bx t$
bx L
bx u$
bx %%
bx K&
b1000 b
b1000 1"
b1000 r$
b100 Z
b100 *$
b100 X$
b100 8'
b1000 Y
b1000 Q"
b1000 V"
b1000 P$
b1000 g$
b1100 U
b1100 a$
b1100 !%
b10100 5
b10100 z$
b10100 }$
b10000 6
b10000 6"
b10000 {$
b10000 |$
1t
#16000
0t
#18000
b10100 V
b10100 7"
b10100 ~$
b10000 ?"
b11000 5
b11000 z$
b11000 }$
b10100 6
b10100 6"
b10100 {$
b10100 |$
b10000 U
b10000 a$
b10000 !%
b1100 Y
b1100 Q"
b1100 V"
b1100 P$
b1100 g$
b1000 Z
b1000 *$
b1000 X$
b1000 8'
b100 W
b100 6$
1t
#20000
0t
#22000
b10100 ?"
b11000 V
b11000 7"
b11000 ~$
b1000 W
b1000 6$
b1100 Z
b1100 *$
b1100 X$
b1100 8'
b10000 Y
b10000 Q"
b10000 V"
b10000 P$
b10000 g$
b10100 U
b10100 a$
b10100 !%
b11100 5
b11100 z$
b11100 }$
b11000 6
b11000 6"
b11000 {$
b11000 |$
1t
#24000
0t
#26000
b11100 V
b11100 7"
b11100 ~$
b11000 ?"
b100000 5
b100000 z$
b100000 }$
b11100 6
b11100 6"
b11100 {$
b11100 |$
b11000 U
b11000 a$
b11000 !%
b10100 Y
b10100 Q"
b10100 V"
b10100 P$
b10100 g$
b10000 Z
b10000 *$
b10000 X$
b10000 8'
b1100 W
b1100 6$
1t
#28000
0t
#30000
b11100 ?"
b100000 V
b100000 7"
b100000 ~$
b10000 W
b10000 6$
b10100 Z
b10100 *$
b10100 X$
b10100 8'
b11000 Y
b11000 Q"
b11000 V"
b11000 P$
b11000 g$
b11100 U
b11100 a$
b11100 !%
b100100 5
b100100 z$
b100100 }$
b100000 6
b100000 6"
b100000 {$
b100000 |$
1t
#32000
0t
#34000
b100100 V
b100100 7"
b100100 ~$
b100000 ?"
b101000 5
b101000 z$
b101000 }$
b100100 6
b100100 6"
b100100 {$
b100100 |$
b100000 U
b100000 a$
b100000 !%
b11100 Y
b11100 Q"
b11100 V"
b11100 P$
b11100 g$
b11000 Z
b11000 *$
b11000 X$
b11000 8'
b10100 W
b10100 6$
1t
#36000
0t
#38000
b100100 ?"
b101000 V
b101000 7"
b101000 ~$
b11000 W
b11000 6$
b11100 Z
b11100 *$
b11100 X$
b11100 8'
b100000 Y
b100000 Q"
b100000 V"
b100000 P$
b100000 g$
b100100 U
b100100 a$
b100100 !%
b101100 5
b101100 z$
b101100 }$
b101000 6
b101000 6"
b101000 {$
b101000 |$
1t
#40000
0t
#42000
b101100 V
b101100 7"
b101100 ~$
b101000 ?"
b110000 5
b110000 z$
b110000 }$
b101100 6
b101100 6"
b101100 {$
b101100 |$
b101000 U
b101000 a$
b101000 !%
b100100 Y
b100100 Q"
b100100 V"
b100100 P$
b100100 g$
b100000 Z
b100000 *$
b100000 X$
b100000 8'
b11100 W
b11100 6$
1t
#44000
0t
#46000
b101100 ?"
b110000 V
b110000 7"
b110000 ~$
b100000 W
b100000 6$
b100100 Z
b100100 *$
b100100 X$
b100100 8'
b101000 Y
b101000 Q"
b101000 V"
b101000 P$
b101000 g$
b101100 U
b101100 a$
b101100 !%
b110100 5
b110100 z$
b110100 }$
b110000 6
b110000 6"
b110000 {$
b110000 |$
1t
#48000
0t
#50000
b110100 V
b110100 7"
b110100 ~$
b110000 ?"
b111000 5
b111000 z$
b111000 }$
b110100 6
b110100 6"
b110100 {$
b110100 |$
b110000 U
b110000 a$
b110000 !%
b101100 Y
b101100 Q"
b101100 V"
b101100 P$
b101100 g$
b101000 Z
b101000 *$
b101000 X$
b101000 8'
b100100 W
b100100 6$
1t
#52000
0t
#54000
b110100 ?"
b111000 V
b111000 7"
b111000 ~$
b101000 W
b101000 6$
b101100 Z
b101100 *$
b101100 X$
b101100 8'
b110000 Y
b110000 Q"
b110000 V"
b110000 P$
b110000 g$
b110100 U
b110100 a$
b110100 !%
b111100 5
b111100 z$
b111100 }$
b111000 6
b111000 6"
b111000 {$
b111000 |$
1t
#56000
0t
#58000
b111100 V
b111100 7"
b111100 ~$
b111000 ?"
b1000000 5
b1000000 z$
b1000000 }$
b111100 6
b111100 6"
b111100 {$
b111100 |$
b111000 U
b111000 a$
b111000 !%
b110100 Y
b110100 Q"
b110100 V"
b110100 P$
b110100 g$
b110000 Z
b110000 *$
b110000 X$
b110000 8'
b101100 W
b101100 6$
1t
#60000
0t
#62000
b111100 ?"
b1000000 V
b1000000 7"
b1000000 ~$
b110000 W
b110000 6$
b110100 Z
b110100 *$
b110100 X$
b110100 8'
b111000 Y
b111000 Q"
b111000 V"
b111000 P$
b111000 g$
b111100 U
b111100 a$
b111100 !%
b1000100 5
b1000100 z$
b1000100 }$
b1000000 6
b1000000 6"
b1000000 {$
b1000000 |$
1t
#64000
0t
#66000
b1000100 V
b1000100 7"
b1000100 ~$
b1000000 ?"
b1001000 5
b1001000 z$
b1001000 }$
b1000100 6
b1000100 6"
b1000100 {$
b1000100 |$
b1000000 U
b1000000 a$
b1000000 !%
b111100 Y
b111100 Q"
b111100 V"
b111100 P$
b111100 g$
b111000 Z
b111000 *$
b111000 X$
b111000 8'
b110100 W
b110100 6$
1t
#68000
0t
#70000
b1000100 ?"
b1001000 V
b1001000 7"
b1001000 ~$
b111000 W
b111000 6$
b111100 Z
b111100 *$
b111100 X$
b111100 8'
b1000000 Y
b1000000 Q"
b1000000 V"
b1000000 P$
b1000000 g$
b1000100 U
b1000100 a$
b1000100 !%
b1001100 5
b1001100 z$
b1001100 }$
b1001000 6
b1001000 6"
b1001000 {$
b1001000 |$
1t
#72000
0t
#74000
b1001100 V
b1001100 7"
b1001100 ~$
b1001000 ?"
b1010000 5
b1010000 z$
b1010000 }$
b1001100 6
b1001100 6"
b1001100 {$
b1001100 |$
b1001000 U
b1001000 a$
b1001000 !%
b1000100 Y
b1000100 Q"
b1000100 V"
b1000100 P$
b1000100 g$
b1000000 Z
b1000000 *$
b1000000 X$
b1000000 8'
b111100 W
b111100 6$
1t
#76000
0t
#78000
b1001100 ?"
b1010000 V
b1010000 7"
b1010000 ~$
b1000000 W
b1000000 6$
b1000100 Z
b1000100 *$
b1000100 X$
b1000100 8'
b1001000 Y
b1001000 Q"
b1001000 V"
b1001000 P$
b1001000 g$
b1001100 U
b1001100 a$
b1001100 !%
b1010100 5
b1010100 z$
b1010100 }$
b1010000 6
b1010000 6"
b1010000 {$
b1010000 |$
1t
#80000
0t
#82000
b1010100 V
b1010100 7"
b1010100 ~$
b1010000 ?"
b1011000 5
b1011000 z$
b1011000 }$
b1010100 6
b1010100 6"
b1010100 {$
b1010100 |$
b1010000 U
b1010000 a$
b1010000 !%
b1001100 Y
b1001100 Q"
b1001100 V"
b1001100 P$
b1001100 g$
b1001000 Z
b1001000 *$
b1001000 X$
b1001000 8'
b1000100 W
b1000100 6$
1t
#84000
0t
#86000
b1010100 ?"
b1011000 V
b1011000 7"
b1011000 ~$
b1001000 W
b1001000 6$
b1001100 Z
b1001100 *$
b1001100 X$
b1001100 8'
b1010000 Y
b1010000 Q"
b1010000 V"
b1010000 P$
b1010000 g$
b1010100 U
b1010100 a$
b1010100 !%
b1011100 5
b1011100 z$
b1011100 }$
b1011000 6
b1011000 6"
b1011000 {$
b1011000 |$
1t
#88000
0t
#90000
b1011100 V
b1011100 7"
b1011100 ~$
b1011000 ?"
b1100000 5
b1100000 z$
b1100000 }$
b1011100 6
b1011100 6"
b1011100 {$
b1011100 |$
b1011000 U
b1011000 a$
b1011000 !%
b1010100 Y
b1010100 Q"
b1010100 V"
b1010100 P$
b1010100 g$
b1010000 Z
b1010000 *$
b1010000 X$
b1010000 8'
b1001100 W
b1001100 6$
1t
#92000
0t
#94000
b1011100 ?"
b1100000 V
b1100000 7"
b1100000 ~$
b1010000 W
b1010000 6$
b1010100 Z
b1010100 *$
b1010100 X$
b1010100 8'
b1011000 Y
b1011000 Q"
b1011000 V"
b1011000 P$
b1011000 g$
b1011100 U
b1011100 a$
b1011100 !%
b1100100 5
b1100100 z$
b1100100 }$
b1100000 6
b1100000 6"
b1100000 {$
b1100000 |$
1t
#96000
0t
#98000
b1100100 V
b1100100 7"
b1100100 ~$
b1100000 ?"
b1101000 5
b1101000 z$
b1101000 }$
b1100100 6
b1100100 6"
b1100100 {$
b1100100 |$
b1100000 U
b1100000 a$
b1100000 !%
b1011100 Y
b1011100 Q"
b1011100 V"
b1011100 P$
b1011100 g$
b1011000 Z
b1011000 *$
b1011000 X$
b1011000 8'
b1010100 W
b1010100 6$
1t
#100000
0t
